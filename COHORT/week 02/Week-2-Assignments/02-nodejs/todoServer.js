/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.  
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();
const port=3000

app.use(bodyParser.json());

module.exports = app;

const todolist=[
  ["Making projects","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."],
  ["Creating team","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."]
]

var ans=[]

// 1 retrieveing all todo items
function sending(todolist){
  ans.length=0;
  for(var i=0;i<todolist.length;i++){
    var t=todolist[i];
    var obj={
      uniq:crypto.randomUUID(),
      title:t[0],
      description:t[1]
    }
    ans.push(obj);
  }
  return ans;

}
function retrieve(req,res){
    var retrieved=sending(todolist);
    res.status(200).send(retrieved);
}
app.get('/todos', retrieve)





// 2)Retrieving a specific todo item by id  
function retrievewithId(req,res){
  const id=req.params.uniqid;
  const g = ans[ans.findIndex((x)=>x.uniq===id)]
  res.send(g);

}
app.get('/todos/:uniqid',retrievewithId)




// 3)Posting a new todo item in the existing data
app.post('/todos/new',(req,res)=>{
  console.log(req.body);

  todolist.push([req.body.title,req.body.description])
  res.redirect("/todos")  
})

//updating using given unique id in queryparam and title and desc in body
app.put('/todos/:uniqid',(req,res)=>{
  const id=req.params.uniqid;
  const titlechnages=req.body.title;
  const descChanges=req.body.description;
  const g= ans.findIndex((x)=>x.uniq===id)
  ans[g].title=titlechnages;
  ans[g].description=descChanges;
  res.send(ans);
})

//









function started (){
  console.log("EXAPMLE APP LISTENING ON PORT 3000")
}

app.listen(port,started);

